// <auto-generated />
using System;
using System.Collections.Generic;
using FusionOps.Infrastructure.Persistence.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FusionOps.Infrastructure.Migrations
{
    [DbContext(typeof(FulfillmentContext))]
    [Migration("20250814142003_InitialLicenseMigration")]
    partial class InitialLicenseMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FusionOps.Domain.Entities.Allocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("Allocations", (string)null);
                });

            modelBuilder.Entity("FusionOps.Domain.Entities.EquipmentResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("HourRate", "FusionOps.Domain.Entities.EquipmentResource.HourRate#Money", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("HourRateAmount");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("HourRateCurrency");
                        });

                    b.HasKey("Id");

                    b.ToTable("EquipmentResources", (string)null);
                });

            modelBuilder.Entity("FusionOps.Domain.Entities.HumanResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.ComplexProperty<Dictionary<string, object>>("HourRate", "FusionOps.Domain.Entities.HumanResource.HourRate#Money", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("HourRateAmount");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("HourRateCurrency");
                        });

                    b.HasKey("Id");

                    b.ToTable("HumanResources", (string)null);
                });

            modelBuilder.Entity("FusionOps.Domain.Entities.LicensePool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AllocatedSeats")
                        .HasColumnType("integer");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Product")
                        .IsUnique();

                    b.ToTable("license_pools", (string)null);
                });

            modelBuilder.Entity("FusionOps.Domain.Entities.StockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ReorderPoint")
                        .HasColumnType("integer");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ComplexProperty<Dictionary<string, object>>("UnitCost", "FusionOps.Domain.Entities.StockItem.UnitCost#Money", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("UnitCostAmount");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("UnitCostCurrency");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.ToTable("StockItems", (string)null);

                    b.HasAnnotation("PartitionedTable", "range_month");
                });

            modelBuilder.Entity("FusionOps.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Warehouses", (string)null);
                });

            modelBuilder.Entity("FusionOps.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_Outbox_ProcessedAt");

                    b.ToTable("Outbox", (string)null);
                });

            modelBuilder.Entity("FusionOps.Infrastructure.Persistence.Postgres.Models.AllocationHistoryRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AllocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("allocation_id");

                    b.Property<DateTime>("FromTs")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_ts");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty");

                    b.Property<DateTime>("Recorded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recorded_at");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<string>("Sku")
                        .HasColumnType("text")
                        .HasColumnName("sku");

                    b.Property<DateTime>("ToTs")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to_ts");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Recorded")
                        .HasDatabaseName("ix_history_project_rec");

                    b.ToTable("allocation_history", (string)null);
                });

            modelBuilder.Entity("FusionOps.Domain.Entities.Allocation", b =>
                {
                    b.OwnsOne("FusionOps.Domain.ValueObjects.TimeRange", "Period", b1 =>
                        {
                            b1.Property<Guid>("AllocationId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("End")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("PeriodEnd");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("PeriodStart");

                            b1.HasKey("AllocationId");

                            b1.ToTable("Allocations");

                            b1.WithOwner()
                                .HasForeignKey("AllocationId");
                        });

                    b.Navigation("Period")
                        .IsRequired();
                });

            modelBuilder.Entity("FusionOps.Domain.Entities.LicensePool", b =>
                {
                    b.OwnsMany("FusionOps.Domain.Entities.LicenseAllocationRef", "Allocations", b1 =>
                        {
                            b1.Property<Guid>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("uuid")
                                .HasColumnName("project_id");

                            b1.Property<int>("Seats")
                                .HasColumnType("integer")
                                .HasColumnName("seats");

                            b1.Property<Guid>("pool_id")
                                .HasColumnType("uuid");

                            b1.HasKey("id");

                            b1.HasIndex("pool_id");

                            b1.ToTable("license_allocations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("pool_id");
                        });

                    b.Navigation("Allocations");
                });
#pragma warning restore 612, 618
        }
    }
}
